#######Component 新增方法 #######
{
1.新增xxx.component.html && xxx.component.ts
2.定義xxx.component.ts 
"備註" ng g c xxx --spec false(不產生spec文件)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import { Component } from "@angular/core";

@Component({
	selector:"xxx", (---定義此Component標籤名稱[例如 > "app-andy"]----)
	templateUrl:"xxx.component.html" (---Component url位置---)
})
export class xxxxComponent{  (---定義此Component Class 名稱 [app.module.ts import用]---)

}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3.設定 app.module.ts
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import { AndyComponent } from './andy/andy.component'; (---引用Component Class 名稱---)

@NgModule({
  declarations: [
    AppComponent,
    ServerComponent,
    AndyComponent	(---引用Component Class 名稱---)
  ],
  imports: [
    BrowserModule,
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
4.於app.component.html[Angular首頁]中填入Component標籤 即完成
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<p>i am in AppComponent!</p>
<hr>
<app-server></app-server>	(---Component標籤---)
<app-andy></app-andy>	(---Component標籤---)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
##############
}

#######Component 新增方法<CLI> #######
{
1.開啟console
2.ng generate component ComponentName 亦可輸入(ng g c ComponentName)
##############
}

#######model 新增方法 #######
{
1.新增xxx.model.ts

}


#######Component Selector 使用方法#######
{
1.xxx.component.ts
@Component({
  //selector: 'app-servers',  //Component use by element
  //selector: '[app-servers]', //Component use by attribute
  selector: '.app-servers', //Component use by class
  // templateUrl: './servers.component.html',
  template: `
  <app-server></app-server>
  <app-server></app-server>
  <app-server></app-server>`,
  styleUrls: ['./servers.component.css']
})
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2.xxx.component.html

                <app-servers></app-servers> <!-- //Component use by element-->
                <div app-servers></div> <!-- //Component use by attribute -->
				<div class="app_servers"></div> <!-- //Component use by class-->
##############
}


{#######Angular event #######
{
1.input
<input type="text" class="form-control" (input)="onUpdateServerName($event)">

2.click
<button class="btn btn-primary" [disabled]="!allowNewServer" (click)="onCreateServer()">Add Server</button>

3.[(ngModel)] two-way binding ----app.module.ts 需註冊 "import { FormsModule } from '@angular/forms';" && 新增至 imports(FormsModule)
<input type="text" class="form-control" [(ngModel)] = "serverName">
##############
}


#######Angular NGF(ngIf) #######(if ; else)
{
+++xxx.component.ts+++
serverCreated = false;
  onCreateServer(){
    this.serverCreated = true;
    this.serverCreationStatus = "Server was created! Name is" + this.serverName;
  }

+++HTML+++
1.ngIf
<p *ngIf="serverCreated">Server was created , server name is {{ serverName}}</p>
<button 
class="btn btn-primary"
[disabled]="!allowNewServer"
(click)="onCreateServer()">Add Server</button>
  
2.ngIf ; else
<p *ngIf="serverCreated ; else noServer">Server was created , server name is {{ serverName}}</p>
<ng-template #noServer>
<p>No server was created!</p>
</ng-template>
############################
}


#######Angular NGStyle #######
{
+++xxx.component.ts+++
    constructor(){
        this.serverStatus = Math.random() > 0.5 ? 'online' : 'offline';
    }
    
    getServerStatus(){
        return this.serverStatus;
    }

    getColor(){
        return this.serverStatus === "online" ?"blue":"red";
    }

+++HTML+++
1.ngStyle
<p>ServerStatus: 
    <span [ngStyle]="{color:getColor()}">{{getServerStatus()}}</span>
</p>
##############
}

#######Angular ngClass #######
{
+++xxx.component.ts+++
@Component({
    selector:"app-server",
    templateUrl:"./server.component.html",
    styles:[`
    .online {
    color:white;
    }
    `]
})

    constructor(){
        this.serverStatus = Math.random() > 0.5 ? 'online' : 'offline';
    }
    
    getServerStatus(){
        return this.serverStatus;
    }

    getColor(){
        return this.serverStatus === "online" ?"blue":"red";
    }

+++HTML+++
1.ngClass
<p>ServerStatus: 
    <span 
    [ngStyle]="{backgroundColor:getColor()}"
    [ngClass]="{online:serverStatus === 'online'}">
    {{getServerStatus()}}</span>
</p>
##############
}

#######Angular ngFor #######
{
+++xxx.component.ts+++
servers = ['testServer','testServer 2'];

  onCreateServer(){
    this.serverCreated = true;
    this.servers.push(this.serverName)
    this.serverCreationStatus = "Server was created! Name is" + this.serverName;
  }

+++HTML+++
1.ngFor
<button 
class="btn btn-primary"
[disabled]="!allowNewServer"
(click)="onCreateServer()">Add Server</button>

<app-server *ngFor="let server of servers"></app-server>
}


#######Binding to Custom Properties (Input 資料傳遞方法[父傳子]) #######
{
1-1.父建立資料[父Component] (例:serverElements)
1-2.子Html引用 (例:[element]='serverElement')
2-1.子Component引用並綁定資料 (Input)
2-2.子Html引用


1-1.+++app.component.ts+++(父Component)
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  serverElements = [{type:'server',name:'Testserver',content:'Just a test!'}];
}

1-2+++app.component.html+++(父Html)
<div class="container">
  <app-cockpit></app-cockpit>
  <div class="row">
    <div class="col-xs-12">
      <app-server-element
      *ngFor="let serverElement of serverElements"
      [element]='serverElement'
      ></app-server-element>
    </div>
  </div>
</div>

2-1.+++xxx.component.ts+++(子Component)
import { Component, OnInit, Input } from '@angular/core';

@Component({
  selector: 'app-server-element',
  templateUrl: './server-element.component.html',
  styleUrls: ['./server-element.component.css']
})
export class ServerElementComponent implements OnInit {
  @Input() element: {type:string , name:string , content:string};

  constructor() { }

  ngOnInit() {
  }
}
2-2.+++xxx.component.html+++(子html)

<div
class="panel panel-default">
<div class="panel-heading">{{ element.name }}</div>
<div class="panel-body">
  <p>
    <strong *ngIf="element.type === 'server'" style="color: red">{{ element.content }}</strong>
    <em *ngIf="element.type === 'blueprint'">{{ element.content }}</em>
  </p>
</div>
</div>



}


#######Alias to Custom Properties (Input 資料傳遞方法[父傳子]---自定屬性名稱) #######
{
1.不一定要使用[element] 可自定義屬性名稱 (例:srcElement)
+++app.component.html+++(父Html)
<div class="container">
  <app-cockpit></app-cockpit>
  <div class="row">
    <div class="col-xs-12">
      <app-server-element
      *ngFor="let serverElement of serverElements"
      [srcElement]='serverElement'
      ></app-server-element>
    </div>
  </div>
</div>

2.Input 綁定自定義屬性名稱 (例:@Input('srcElement') element: {type:string , name:string , content:string};)
+++xxx.component.ts+++(子Component)
import { Component, OnInit, Input } from '@angular/core';

@Component({
  selector: 'app-server-element',
  templateUrl: './server-element.component.html',
  styleUrls: ['./server-element.component.css']
})
export class ServerElementComponent implements OnInit {
  @Input('srcElement') element: {type:string , name:string , content:string};

  constructor() { }

  ngOnInit() {
  }
}

}	


#######Component 事件傳遞方法 (Output [子傳父](事件綁訂回傳--外到內))#######
{
1-1.建立事件 in HTML (例:serverCreated , blueprintCreated)
____app.component.html+++(父Html)____
<div class="container">
  <app-cockpit
  (serverCreated)="onServerAdded($event)"
  (blueprintCreated)="onBlueprintAdded($event)"
  ></app-cockpit>
  <div class="row">
    <div class="col-xs-12">
      <app-server-element
      *ngFor="let serverElement of serverElements"
      [srcElement]='serverElement'
      ></app-server-element>
    </div>
  </div>
</div>
1-2.建立事件 in Component ("onServerAdded","onBlueprintAdded")
____app.component.ts (父Component)____
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  serverElements = [{type: 'server', name: 'Testserver', content: 'Just a test!'}];

  onServerAdded(serverData: {serverName: string, serverContent: string}) {
      this.serverElements.push({
      type: 'server',
      name: serverData.serverName,
      content: serverData.serverContent
    });
  }

  onBlueprintAdded(blueprintData: {serverName: string, serverContent: string}) {
    this.serverElements.push({
      type: 'blueprint',
      name: blueprintData.serverName,
      content: blueprintData.serverContent
    });
  }
  }
  
2-1.資料傳遞事件"子 > 父" (Output) (import 引用 Output"輸出")(@Output 引用父ng事件[HTML名稱] && 定義屬性<複製父Component>)
____xxx.component.ts (子Component)____
import { Component, OnInit, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-cockpit',
  templateUrl: './cockpit.component.html',
  styleUrls: ['./cockpit.component.css']
})
export class CockpitComponent implements OnInit {
  @Output() serverCreated = new EventEmitter<{serverName:string,serverContent:string}>();
  @Output() blueprintCreated = new EventEmitter<{serverName:string,serverContent:string}>();
  newServerName = '';
  newServerContent = '';

  constructor() { }

  ngOnInit() {
  }

  onAddServer() {
  this.serverCreated.emit({
  serverName: this.newServerName,
  serverContent: this.newServerContent
  });
  }

  onAddBlueprint() {
    this.blueprintCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent
    });
  }
}
2-2.子HTML透過click觸發Output
____xxx.component.html (子HTML)____
<div class="row">
  <div class="col-xs-12">
    <p>Add new Servers or blueprints!</p>
    <label>Server Name</label>
    <input type="text" class="form-control" [(ngModel)]="newServerName">
    <label>Server Content</label>
    <input type="text" class="form-control" [(ngModel)]="newServerContent">
    <br>
    <button
      class="btn btn-primary"
      (click)="onAddServer()">Add Server</button>
    <button
      class="btn btn-primary"
      (click)="onAddBlueprint()">Add Server Blueprint</button>
  </div>
</div>


}


#######Component 事件傳遞方法[Output自訂名稱] (Output [子傳父](事件綁訂回傳--外到內))#######
{
1.定義傳遞事件"bpCreated"
____app.component.html+++(父Html)____
<div class="container">
  <app-cockpit
  (serverCreated)="onServerAdded($event)"
  (bpCreated)="onBlueprintAdded($event)"
  ></app-cockpit>
  <div class="row">
    <div class="col-xs-12">
      <app-server-element
      *ngFor="let serverElement of serverElements"
      [srcElement]='serverElement'
      ></app-server-element>
    </div>
  </div>
</div>

2.自行定義子Output名稱[@Output('bpCreated') xxx = new EventEmitter<{}>()]
____xxx.component.ts (子Component)____
import { Component, OnInit, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-cockpit',
  templateUrl: './cockpit.component.html',
  styleUrls: ['./cockpit.component.css']
})
export class CockpitComponent implements OnInit {
  @Output() serverCreated = new EventEmitter<{serverName:string,serverContent:string}>();
  @Output('bpCreated') blueprintCreated = new EventEmitter<{serverName:string,serverContent:string}>();
  newServerName = '';
  newServerContent = '';

  constructor() { }

  ngOnInit() {
  }

  onAddServer() {
  this.serverCreated.emit({
  serverName: this.newServerName,
  serverContent: this.newServerContent
  });
  }

  onAddBlueprint() {
    this.blueprintCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent
    });
  }
}
}


#######Component View Encapsulation (似乎是控制css影響的範圍)#######
{

@Component({
  selector: 'app-server-element',
  templateUrl: './server-element.component.html',
  styleUrls: ['./server-element.component.css'],
  
   encapsulation: ViewEncapsulation.Emulated  //None , Native , Emulated(default)
  
})
}


#######資料傳遞方法 local Reference in Templates [HTML to Component --- use by arguments]#######
{
1.增加標籤"#" && 並將資料連結至click事件中 (例:#serverNameInput)
____xxx.component.html____
<div class="row">
  <div class="col-xs-12">
    <p>Add new Servers or blueprints!</p>
    <label>Server Name</label>
    <!-- <input type="text" class="form-control" [(ngModel)]="newServerName"> -->
    <input
    type="text"
    class="form-control"
    #serverNameInput >
    <label>Server Content</label>
    <input type="text" class="form-control" [(ngModel)]="newServerContent">
    <br>
    <button
      class="btn btn-primary"
      (click)="onAddServer(serverNameInput)">Add Server</button>
    <button
      class="btn btn-primary"
      (click)="onAddBlueprint(serverNameInput)">Add Server Blueprint</button>
  </div>
</div>

2.定義function之參數 && 引用之 (同getbyelement)
____xxx.component.ts____
import { Component, OnInit, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-cockpit',
  templateUrl: './cockpit.component.html',
  styleUrls: ['./cockpit.component.css']
})
export class CockpitComponent implements OnInit {
  @Output() serverCreated = new EventEmitter<{serverName:string,serverContent:string}>();
  @Output('bpCreated') blueprintCreated = new EventEmitter<{serverName:string,serverContent:string}>();

  constructor() { }

  ngOnInit() {
  }

  onAddServer(nameInput: HTMLInputElement) {
  this.serverCreated.emit({
  serverName: nameInput.value,
  serverContent: this.newServerContent
  });
  }

  onAddBlueprint(nameInput: HTMLInputElement) {
    this.blueprintCreated.emit({
      serverName: nameInput.value,
      serverContent: this.newServerContent
    });
  }
}
}


#######ViewChild [HTML to Component --- use by variable] #######
{
1.html定義"serverContentInput"
____xxx.component.html____
  <div class="col-xs-12">
    <p>Add new Servers or blueprints!</p>
    <label>Server Name</label>
    <input
    type="text"
    class="form-control"
    #serverNameInput >
    <label>Server Content</label>
    <input
    type="text"
    class="form-control"
    #serverContentInput>
    <br>
    <button
      class="btn btn-primary"
      (click)="onAddServer(serverNameInput)">Add Server</button>
    <button
      class="btn btn-primary"
      (click)="onAddBlueprint(serverNameInput)">Add Server Blueprint</button>
  </div>

2.Component引用ViewChild && inport "ViewChild","ElementRef" [例:@ViewChild('serverContentInput') serverContentInput: ElementRef;]
____xxx.component.ts____
import { Component, OnInit, EventEmitter, Output, ViewChild, ElementRef } from '@angular/core';

@Component({
  selector: 'app-cockpit',
  templateUrl: './cockpit.component.html',
  styleUrls: ['./cockpit.component.css']
})
export class CockpitComponent implements OnInit {
  @Output() serverCreated = new EventEmitter<{serverName:string,serverContent:string}>();
  @Output('bpCreated') blueprintCreated = new EventEmitter<{serverName:string,serverContent:string}>();

  @ViewChild('serverContentInput') serverContentInput: ElementRef;

  constructor() { }

  ngOnInit() {
  }

  onAddServer(nameInput: HTMLInputElement) {

  this.serverCreated.emit({
  serverName: nameInput.value,
  serverContent: this.serverContentInput.nativeElement.value
  });
  }

  onAddBlueprint(nameInput: HTMLInputElement) {
    this.blueprintCreated.emit({
      serverName: nameInput.value,
      serverContent: this.serverContentInput.nativeElement.value
    });
  }
  }
}


#######ng-content  #######
{
"ng-content" ??
1.父html  (app.component.html)

<div class="container">
  <app-cockpit
  (serverCreated)="onServerAdded($event)"
  (bpCreated)="onBlueprintAdded($event)"
  ></app-cockpit>
  <div class="row">
    <div class="col-xs-12">
      <app-server-element
      *ngFor="let serverElement of serverElements"
      [srvElement]="serverElement">
      <p>
        <strong *ngIf="serverElement.type === 'server'" style="color: red">{{ serverElement.content }}</strong>
        <em *ngIf="serverElement.type === 'blueprint'" >{{ serverElement.content }}</em>
      </p>
    </app-server-element>
    </div>
  </div>
</div>


2.子html  (app-server-element.html)
<div
class="panel panel-default">
<div class="panel-heading">{{ element.name }}</div>
<div class="panel-body">
<ng-content></ng-content>
</div>
</div>
}

#######Component Liecycle  #######
{
ngOnChanges : Called after a bound input property changes
ngOnInit : Called once the components is initialized
ngDoCheck : Called during every change detection run
ngAfterContentlnit : Called after content(ng-content) has been projected into view 
ngAfterContentCehcked : Called every time the projected content has been checked
ngAfterViewlnit : Called after the component's view (and clild views) have been checked
ngOnDestroy : Called once the components is about to be destroyed
}


#######建立Attribute Directive (ng command)#######
{
1.開啟console
2.ng g d directiveName
}


#######  #######
#######  #######
#######  #######
#######  #######